name: Backend CI/CD

on:
  push:
    paths:
      - 'Application-Code/backend/**'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Override image tag (defaults to commit sha)'
        required: false
        default: ''

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    env:
      REPO_DIR: Application-Code/backend

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set IMAGE_TAG
      run: |
        if [ -n "${{ github.event.inputs.image_tag }}" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Install SonarScanner CLI
      run: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.1.3023-linux.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-4.8.1.3023-linux /opt/sonar-scanner
        export PATH=$PATH:/opt/sonar-scanner/bin
        sonar-scanner --version

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        args: >
          -Dsonar.organization=sandeshhypha-eng
          -Dsonar.projectKey=sandeshhypha-eng_docker
          -Dsonar.sources=.
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Set up QEMU and Buildx
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build backend image (local)
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.REPO_DIR }}
        file: ${{ env.REPO_DIR }}/Dockerfile
        push: false
        load: true
        tags: |
          ${{ secrets.ECR_REGISTRY }}/backend:${{ env.IMAGE_TAG }}
          ${{ secrets.ECR_REGISTRY }}/backend:latest

    - name: Trivy vulnerability scan (docker-run)
      run: |
        set -euo pipefail
        IMAGE=${{ secrets.ECR_REGISTRY }}/backend:${{ env.IMAGE_TAG }}
        echo "Scanning image: $IMAGE"
        # Pull image locally so trivy can scan it
        docker pull "$IMAGE" || true
        # Run Trivy via its Docker image. Fail the step on HIGH or CRITICAL vulnerabilities.
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:/root/.cache aquasec/trivy:latest image --severity HIGH,CRITICAL --exit-code 1 "$IMAGE"

    - name: Ensure ECR repository exists
      run: |
        aws ecr create-repository --repository-name backend || true

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push backend image to ECR
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.REPO_DIR }}
        file: ${{ env.REPO_DIR }}/Dockerfile
        push: true
        tags: |
          ${{ secrets.ECR_REGISTRY }}/backend:${{ env.IMAGE_TAG }}
          ${{ secrets.ECR_REGISTRY }}/backend:latest

    - name: Configure kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Deploy backend (set image and rollout)
      run: |
        set -euo pipefail
        NAMESPACE=three-tier
        IMAGE=${{ secrets.ECR_REGISTRY }}/backend:${{ env.IMAGE_TAG }}
        echo "Updating deployment 'api' image to: $IMAGE"
        kubectl -n $NAMESPACE set image deployment/api api=$IMAGE --record
        kubectl -n $NAMESPACE rollout status deployment/api --timeout=3m

    - name: Verify backend deployment
      run: kubectl -n three-tier get deployments -o wide

# Required secrets:
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REGISTRY, EKS_CLUSTER_NAME
# Optional for Sonar: SONAR_HOST_URL, SONAR_TOKEN, SONAR_PROJECT_KEY
